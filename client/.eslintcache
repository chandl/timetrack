[{"/Users/chandler/Documents/Projects/timetrack/client/src/index.js":"1","/Users/chandler/Documents/Projects/timetrack/client/src/reportWebVitals.js":"2","/Users/chandler/Documents/Projects/timetrack/client/src/App.js":"3","/Users/chandler/Documents/Projects/timetrack/client/src/components/AppHeader.js":"4","/Users/chandler/Documents/Projects/timetrack/client/src/pages/Home.js":"5","/Users/chandler/Documents/Projects/timetrack/client/src/pages/TimeManager.js":"6","/Users/chandler/Documents/Projects/timetrack/client/src/components/ErrorSnackbar.js":"7","/Users/chandler/Documents/Projects/timetrack/client/src/components/TimeEditor.js":"8","/Users/chandler/Documents/Projects/timetrack/client/src/components/ManagerComponent.js":"9","/Users/chandler/Documents/Projects/timetrack/client/src/pages/ReportManager.js":"10","/Users/chandler/Documents/Projects/timetrack/client/src/components/ReportCreator.js":"11","/Users/chandler/Documents/Projects/timetrack/client/src/components/ReportEditor.js":"12","/Users/chandler/Documents/Projects/timetrack/client/src/components/StepperModal.js":"13","/Users/chandler/Documents/Projects/timetrack/client/src/components/ConfirmDialog.js":"14","/Users/chandler/Documents/Projects/timetrack/client/src/components/ReportOverview.js":"15","/Users/chandler/Documents/Projects/timetrack/client/src/components/ReportWeek.js":"16","/Users/chandler/Documents/Projects/timetrack/client/src/components/TimeTable.js":"17","/Users/chandler/Documents/Projects/timetrack/client/src/components/ReportCustomerTabs.js":"18","/Users/chandler/Documents/Projects/timetrack/client/src/components/FinalizeReport.js":"19","/Users/chandler/Documents/Projects/timetrack/client/src/components/LoadingBackdrop.js":"20","/Users/chandler/Documents/Projects/timetrack/client/src/components/WeeklyTimeList.js":"21","/Users/chandler/Documents/Projects/timetrack/client/src/components/ReportByDay.js":"22","/Users/chandler/Documents/Projects/timetrack/client/src/components/bulk/BulkTimeEditor.js":"23","/Users/chandler/Documents/Projects/timetrack/client/src/components/bulk/BulkTimeParser.js":"24"},{"size":515,"mtime":1609114857173,"results":"25","hashOfConfig":"26"},{"size":364,"mtime":1609114857322,"results":"27","hashOfConfig":"26"},{"size":931,"mtime":1614226659324,"results":"28","hashOfConfig":"26"},{"size":883,"mtime":1614226585894,"results":"29","hashOfConfig":"26"},{"size":173,"mtime":1609114857184,"results":"30","hashOfConfig":"26"},{"size":7441,"mtime":1614235049159,"results":"31","hashOfConfig":"26"},{"size":1343,"mtime":1609114857108,"results":"32","hashOfConfig":"26"},{"size":5788,"mtime":1624692870938,"results":"33","hashOfConfig":"26"},{"size":1440,"mtime":1624692870936,"results":"34","hashOfConfig":"26"},{"size":7082,"mtime":1609387487146,"results":"35","hashOfConfig":"26"},{"size":2669,"mtime":1612230296970,"results":"36","hashOfConfig":"26"},{"size":3690,"mtime":1614234676653,"results":"37","hashOfConfig":"26"},{"size":2606,"mtime":1611970081489,"results":"38","hashOfConfig":"26"},{"size":1277,"mtime":1609236951995,"results":"39","hashOfConfig":"26"},{"size":3754,"mtime":1609550998045,"results":"40","hashOfConfig":"26"},{"size":5765,"mtime":1614234676820,"results":"41","hashOfConfig":"26"},{"size":1791,"mtime":1614234676973,"results":"42","hashOfConfig":"26"},{"size":2088,"mtime":1612230764892,"results":"43","hashOfConfig":"26"},{"size":125,"mtime":1609382743593,"results":"44","hashOfConfig":"45"},{"size":560,"mtime":1609382743607,"results":"46","hashOfConfig":"26"},{"size":2239,"mtime":1611632886266,"results":"47","hashOfConfig":"26"},{"size":1323,"mtime":1614234676516,"results":"48","hashOfConfig":"26"},{"size":8399,"mtime":1614234960686,"results":"49","hashOfConfig":"26"},{"size":1338,"mtime":1638652401304,"results":"50","hashOfConfig":"26"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"1h0yjzr",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"53"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"53"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pg95bi",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"53"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/chandler/Documents/Projects/timetrack/client/src/index.js",[],["104","105"],"/Users/chandler/Documents/Projects/timetrack/client/src/reportWebVitals.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/App.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/AppHeader.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/pages/Home.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/pages/TimeManager.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/ErrorSnackbar.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/TimeEditor.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/ManagerComponent.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/pages/ReportManager.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/ReportCreator.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/ReportEditor.js",["106"],"import React, { useEffect } from \"react\";\nimport { compose } from \"recompose\";\nimport { withRouter } from \"react-router-dom\";\nimport { withStyles } from \"@material-ui/core\";\nimport StepperModal from \"./StepperModal\";\nimport { Fetch } from \"./ManagerComponent\";\nimport { ReportOverview } from \"./ReportOverview\";\nimport { ReportWeek } from \"./ReportWeek\";\nimport LoadingBackdrop from \"./LoadingBackdrop\";\nimport ConfirmDialog from \"./ConfirmDialog\";\nimport { ReportByDay } from \"./ReportByDay\";\n\nconst styles = (theme) => ({\n  marginTop: {\n    marginTop: theme.spacing(2),\n  },\n  card: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    margin: theme.spacing(2),\n  },\n});\n\nconst getReport = async (reportId) => {\n  return Fetch(\"get\", `/report/${reportId}`)\n    .then((res) => res)\n    .catch((err) => {\n      this.setState({ error: err });\n    });\n};\n\nconst finalizeReport = async (reportId) => {\n  return Fetch(\"post\", `/report/finalize/${reportId}`)\n    .then((res) => res)\n    .catch((err) => this.setState({ error: err }));\n};\n\nconst ReportEditor = ({ classes, report, onSave, history }) => {\n  const [toFinalize, setToFinalize] = React.useState();\n  const [steps, setSteps] = React.useState();\n\n  useEffect(() => {\n    getReport(report.id).then((rep) => {\n      setSteps(generateSteps(rep));\n    });\n  }, [report.id]);\n\n  const generateSteps = (report) => {\n    const overview = [\n      {\n        name: \"Report Overview\",\n        content: <ReportOverview classes={classes} report={report} />,\n        validate: () => Promise.resolve(),\n        complete: () => Promise.resolve(),\n        isEnabled: () => true,\n      },\n    ];\n\n    let i = 1;\n    const weeklyReview = report.details.map((week) => {\n      return {\n        name: `Review Week ${i++}`,\n        content: (\n          <div style={{ overflowY: \"scroll\" }}>\n            <ReportWeek\n              week={week}\n              reload={() =>\n                getReport(report.id).then((rep) => setSteps(generateSteps(rep)))\n              }\n            />\n          </div>\n        ),\n        validate: () => Promise.resolve(),\n        complete: () => Promise.resolve(),\n        isEnabled: () => true,\n      };\n    });\n\n    const reportByDay = [\n      {\n        name: \"Final Review\",\n        content: <ReportByDay weeks={report.details} />,\n        validate: () => Promise.resolve(),\n        complete: () => Promise.resolve(),\n        isEnabled: () => true,\n      },\n    ];\n\n    return overview.concat(weeklyReview).concat(reportByDay);\n  };\n\n  return steps ? (\n    <div>\n      <StepperModal\n        classes={classes}\n        history={history}\n        onSave={() => {\n          if (\"COMPLETED\" === report.status) {\n            return onSave(report);\n          }\n          return setToFinalize([\n            report,\n            async () =>\n              await new Promise(() => setTimeout(() => onSave(report), 250)),\n          ]);\n        }}\n        onClose={() => onSave(report)}\n        steps={steps}\n      />\n\n      {toFinalize && (\n        <ConfirmDialog\n          title=\"Finalize Report?\"\n          message={`This will permanently finalize this report and generate the time tracker file. You will not be able to make additional changes or add new time after proceeding. Continue?`}\n          onAccept={() => {\n            finalizeReport(toFinalize[0].id);\n            toFinalize[1](); // callback\n            setToFinalize(null);\n          }}\n          onCancel={() => {\n            toFinalize[1](); // callback\n            setToFinalize(null);\n          }}\n          state={toFinalize}\n        />\n      )}\n    </div>\n  ) : (\n    <LoadingBackdrop />\n  );\n};\n\nexport default compose(withRouter, withStyles(styles))(ReportEditor);\n","/Users/chandler/Documents/Projects/timetrack/client/src/components/StepperModal.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/ConfirmDialog.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/ReportOverview.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/ReportWeek.js",["107"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Chip, IconButton, Typography } from \"@material-ui/core\";\nimport { Delete as DeleteIcon, Edit as EditIcon } from \"@material-ui/icons\";\nimport { TimeTable } from \"./TimeTable\";\nimport {\n  Fetch,\n  formatMinutes,\n  roundMinutesToNearestFifteen,\n} from \"./ManagerComponent\";\nimport ReportCustomerTabs from \"./ReportCustomerTabs\";\nimport ErrorSnackbar from \"./ErrorSnackbar\";\nimport ConfirmDialog from \"./ConfirmDialog\";\nimport { WeeklyTimeList } from \"./WeeklyTimeList\";\nimport TimeEditor from \"./TimeEditor\";\n\nexport const ReportWeek = ({ week, reload }) => {\n  const [timeToDelete, setTimeToDelete] = React.useState(null);\n  const [error, setError] = React.useState(null);\n  const [timeToEdit, setTimeToEdit] = React.useState(null);\n\n  const deleteTime = async (time) => {\n    await Fetch(\"delete\", `/time/${time.id}`)\n      .then(() => reload())\n      .catch((err) => setError(err));\n  };\n\n  const saveTime = async (time) => {\n    const id = time.id;\n\n    // Remove unneeded info from post\n    delete time.id;\n    delete time.associatedReport;\n    delete time.associatedReportId;\n    delete time.active;\n    delete time.finalized;\n    await Fetch(\"put\", `/time/${id}`, time).catch((err) => setError(err));\n    setTimeToEdit(null);\n\n    reload();\n  };\n\n  const timeColumns = [\n    { field: \"day\", headerName: \"Date\", width: 110 },\n    { field: \"customer\", headerName: \"Customer\" },\n    { field: \"serviceItem\", headerName: \"SvcItem\" },\n    {\n      field: \"minutes\",\n      headerName: \"Time\",\n      valueFormatter: (params) => formatMinutes(params.row.minutes),\n    },\n    {\n      field: \"roundedMinutes\",\n      headerName: \"Rounded\",\n      valueFormatter: (params) =>\n        formatMinutes(roundMinutesToNearestFifteen(params.row.minutes)),\n      sortComparator: (v1, v2, a, b) => a.row.minutes - b.row.minutes,\n    },\n    {\n      field: \"notes\",\n      headerName: \"Notes\",\n      width: 300,\n      flex: 1,\n    },\n    {\n      field: \"billable\",\n      headerName: \"Billable\",\n      sortable: false,\n      renderCell: (params) => {\n        if (params.row.billable) {\n          return <Chip label=\"Yes\" size=\"small\" color=\"primary\" />;\n        } else {\n          return <Chip label=\"No\" size=\"small\" color=\"secondary\" />;\n        }\n      },\n    },\n    {\n      field: \"edit\",\n      headerName: \"Actions\",\n      sortable: false,\n      width: 150,\n      renderCell: (params) => (\n        <>\n          <IconButton\n            // component={Link}\n            // to={`/time/${params.row.id}`}\n            onClick={() => setTimeToEdit(params.row)}\n            color=\"inherit\"\n            disabled={params.row.finalized}\n          >\n            <EditIcon />\n          </IconButton>\n          <IconButton\n            onClick={() => setTimeToDelete(params.row)}\n            color=\"inherit\"\n            disabled={params.row.finalized}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </>\n      ),\n    },\n  ];\n\n  // index, content, label\n  let index = 0;\n  const customerTabs = week.customers\n    .sort((a, b) => {\n      // Always sort customer names in ascending alphabetic order\n      return a.customer < b.customer ? -1 : 1;\n    })\n    .map((cust) => {\n      return {\n        index: index++,\n        label: cust.customer,\n        content: (\n          <div style={{ width: \"100%\", height: \"65vh\" }}>\n            <TimeTable\n              rows={cust.times}\n              columns={timeColumns}\n              onMerge={(merged) => {\n                reload();\n                setTimeToEdit(merged);\n              }}\n              props={{\n                rowsPerPageOptions: [5, 15, 25, 50, 100],\n                pageSize: 25,\n                checkboxSelection: true,\n              }}\n            />\n          </div>\n        ),\n      };\n    })\n    .concat([\n      {\n        index: index++,\n        label: \"Daily Overview\",\n        content: (\n          <div style={{ height: \"65vh\" }}>\n            <WeeklyTimeList week={week} />\n          </div>\n        ),\n      },\n    ]);\n  return (\n    <div style={{ width: \"100%\" }}>\n      <Typography variant=\"h5\">\n        Reviewing Week: {week.startDate} - {week.endDate}{\" \"}\n      </Typography>\n\n      <p>\n        Here, you can review the week and make any changes necessary to your\n        tracked time. Time is organized by customer; you can edit, merge, and\n        delete times on each customer's tab. The 'Daily Overview' tab will allow\n        you to preview how times will be split between weekdays and reported in\n        the end.\n      </p>\n\n      <div>\n        {week.customers.length > 0 ? (\n          <div>\n            <ReportCustomerTabs customerTabs={customerTabs} />\n          </div>\n        ) : (\n          <Typography variant=\"subtitle1\">\n            No time to display for this week...\n          </Typography>\n        )}\n      </div>\n      {timeToDelete && (\n        <ConfirmDialog\n          title=\"Permanently Delete Time?\"\n          message={`This will permanently delete this time (day: ${timeToDelete.day} | minutes: ${timeToDelete.minutes} | notes: '${timeToDelete.notes}'). Do you want to continue?`}\n          onAccept={() => {\n            deleteTime(timeToDelete);\n            setTimeToDelete(null);\n          }}\n          onCancel={() => {\n            console.log(\"Cancelled deletion\");\n            setTimeToDelete(null);\n          }}\n        />\n      )}\n      {error && (\n        <ErrorSnackbar onClose={() => setError(null)} message={error} />\n      )}\n      {timeToEdit && (\n        <TimeEditor\n          post={timeToEdit}\n          customers={[]}\n          serviceItems={[]}\n          onSave={saveTime}\n          lockedDown={true}\n          onCancel={() => setTimeToEdit(null)}\n        />\n      )}\n    </div>\n  );\n};\n","/Users/chandler/Documents/Projects/timetrack/client/src/components/TimeTable.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/ReportCustomerTabs.js",[],["108","109"],"/Users/chandler/Documents/Projects/timetrack/client/src/components/FinalizeReport.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/LoadingBackdrop.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/WeeklyTimeList.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/ReportByDay.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/bulk/BulkTimeEditor.js",["110","111","112"],"import React from \"react\";\nimport {\n  withStyles,\n  Card,\n  CardContent,\n  Modal,\n  Button,\n  Typography,\n  LinearProgress,\n} from \"@material-ui/core\";\n\nimport { IconButton, Chip } from \"@material-ui/core\";\n\nimport { Delete as DeleteIcon } from \"@material-ui/icons\";\n\nimport ErrorSnackbar from \"../ErrorSnackbar\";\nimport { Fetch, formatMinutes } from \"../../components/ManagerComponent\";\n\nimport { TimeTable } from \"../TimeTable\";\nimport { parseCsvToTimes } from \"./BulkTimeParser\";\n\nimport { CSVReader } from \"react-papaparse\";\n\nimport { compose } from \"recompose\";\nimport { withRouter } from \"react-router-dom\";\n\nconst styles = (theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  modalCard: {\n    width: \"90%\",\n    height: \"90%\",\n    // maxWidth: 500,\n  },\n  modalCardContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  marginTop: {\n    marginTop: theme.spacing(2),\n  },\n});\n\nconst buttonRef = React.createRef();\n\nconst BulkTimeEditor = ({ classes, onSave, history, lockedDown, onCancel }) => {\n  const [error, setError] = React.useState(null);\n  const [times, setTimes] = React.useState(null);\n  const [dayTimes, setDayTimes] = React.useState(null);\n  const [uploading, setUploading] = React.useState(false);\n\n  const timeColumns = [\n    { field: \"day\", headerName: \"Date\", width: 110 },\n    { field: \"customer\", headerName: \"Customer\" },\n    { field: \"serviceItem\", headerName: \"SvcItem\" },\n    {\n      field: \"minutes\",\n      headerName: \"Time\",\n      valueFormatter: (params) => formatMinutes(params.row.minutes),\n    },\n    {\n      field: \"notes\",\n      headerName: \"Notes\",\n      width: 400,\n      flex: 1,\n      sortable: false,\n    },\n    {\n      field: \"billable\",\n      headerName: \"Billable\",\n      sortable: true,\n      renderCell: (params) => {\n        if (params.row.billable) {\n          return <Chip label=\"Yes\" size=\"small\" color=\"primary\" />;\n        } else {\n          return <Chip label=\"No\" size=\"small\" color=\"secondary\" />;\n        }\n      },\n    },\n    {\n      field: \"edit\",\n      headerName: \"Actions\",\n      sortable: false,\n      width: 150,\n      renderCell: (params) => (\n        <>\n          <IconButton\n            onClick={() => {\n              deleteTime(params.row);\n              calculateDayTimes(times);\n            }}\n            color=\"inherit\"\n          >\n            <DeleteIcon />\n          </IconButton>\n        </>\n      ),\n    },\n  ];\n\n  const deleteTime = (timeRow) => {\n    // times.remove(timeRow);\n    setTimes(times.filter((time) => time.id != timeRow.id));\n  };\n\n  const onClose = () => {\n    if (onCancel) {\n      onCancel();\n    } else {\n      history.goBack();\n    }\n  };\n\n  const handleOpenDialog = (e) => {\n    // Note that the ref is set async, so it might be null at some point\n    if (buttonRef.current) {\n      buttonRef.current.open(e);\n    }\n  };\n\n  const calculateDayTimes = (times) => {\n    // Calculate minutes per day\n    const days = new Set(times.map((t) => t.day));\n    const dt = [];\n    days.forEach((day) => {\n      let min = 0;\n      times.filter((t) => t.day === day).forEach((t) => (min += t.minutes));\n      dt.push({\n        day: day,\n        minutes: min,\n      });\n    });\n    console.log(\"Minutes Per Day:::\", dt);\n\n    setDayTimes(dt);\n  };\n\n  const handleOnFileLoad = (data) => {\n    console.log(\"------------LOADING---------------\");\n    const times = parseCsvToTimes(data);\n    setTimes(times);\n    calculateDayTimes(times);\n    console.log(\"---------------------------\");\n  };\n\n  const handleOnError = (err, file, inputElem, reason) => {\n    console.log(err);\n  };\n\n  const handleOnRemoveFile = (data) => {\n    console.log(\"Clearing File\");\n    setTimes(null);\n    setDayTimes(null);\n  };\n\n  const handleRemoveFile = (e) => {\n    // Note that the ref is set async, so it might be null at some point\n    if (buttonRef.current) {\n      buttonRef.current.removeFile(e);\n    }\n  };\n\n  const handleUpload = async () => {\n    setUploading(true);\n\n    await times.forEach((t) => {\n      delete t.id;\n      console.log(\"UPLOADING time:\", t);\n      Fetch(\"post\", \"/time\", t).catch((err) => setError(err));\n    });\n\n    handleOnRemoveFile();\n    onSave();\n  };\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <Modal className={classes.modal} onClose={() => onClose()} open>\n        <Card className={classes.modalCard}>\n          <CardContent className={classes.modalCardContent}>\n            <Typography variant=\"h4\">Bulk Time Importer</Typography>\n\n            <div\n              style={{\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n            >\n              <div\n                style={{ width: \"100%\", height: \"75vh\", overflowY: \"scroll\" }}\n              >\n                {(times && (\n                  <div>\n                    <Typography>\n                      Review times to import. If this looks good, click the\n                      'Upload' button. If not, edit your timesheet csv and\n                      re-upload.\n                    </Typography>\n\n                    {dayTimes && (\n                      <ul>\n                        {dayTimes.map((dayTime) => (\n                          <li>\n                            {dayTime.day} : {formatMinutes(dayTime.minutes)}\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n\n                    <TimeTable\n                      rows={times}\n                      columns={timeColumns}\n                      props={{\n                        rowsPerPageOptions: [5, 15, 25, 50, 100],\n                        pageSize: 25,\n                        checkboxSelection: false,\n                      }}\n                    />\n                  </div>\n                )) || (\n                  <Typography>\n                    Upload CSV File to Bulk Import Time Data\n                  </Typography>\n                )}\n              </div>\n\n              <CSVReader\n                ref={buttonRef}\n                onFileLoad={handleOnFileLoad}\n                onError={handleOnError}\n                noClick\n                noDrag\n                onRemoveFile={handleOnRemoveFile}\n              >\n                {({ file }) => (\n                  <aside\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"row\",\n                      marginBottom: 10,\n                      justifyContent: \"center\",\n                    }}\n                  >\n                    <Button\n                      color=\"primary\"\n                      variant=\"contained\"\n                      onClick={handleOpenDialog}\n                      style={{ marginRight: \"5px\" }}\n                    >\n                      Browse Files\n                    </Button>\n                    <Button\n                      color=\"inherit\"\n                      variant=\"contained\"\n                      onClick={handleRemoveFile}\n                      style={{ marginRight: \"5px\" }}\n                    >\n                      Clear\n                    </Button>\n                    <div\n                      style={{\n                        borderWidth: 1,\n                        borderStyle: \"solid\",\n                        borderColor: \"#ccc\",\n                        height: 30,\n                        lineHeight: 2.5,\n                        marginTop: 5,\n                        marginBottom: 5,\n                        marginRight: 5,\n                        paddingLeft: 13,\n                        // paddingTop: 3,\n                        width: \"60%\",\n                      }}\n                    >\n                      {file && file.name}\n                    </div>\n                    <Button\n                      color=\"secondary\"\n                      variant=\"contained\"\n                      size=\"small\"\n                      disabled={!times}\n                      onClick={handleUpload}\n                    >\n                      Upload\n                    </Button>\n                  </aside>\n                )}\n              </CSVReader>\n            </div>\n\n            {error && (\n              <ErrorSnackbar onClose={() => setError(null)} message={error} />\n            )}\n          </CardContent>\n        </Card>\n      </Modal>\n    </div>\n  );\n};\n\nexport default compose(withRouter, withStyles(styles))(BulkTimeEditor);\n","/Users/chandler/Documents/Projects/timetrack/client/src/components/bulk/BulkTimeParser.js",["113","114"],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":46,"column":6,"nodeType":"121","endLine":46,"endColumn":17,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":2,"column":10,"nodeType":"125","messageId":"126","endLine":2,"endColumn":14},{"ruleId":"115","replacedBy":"127"},{"ruleId":"117","replacedBy":"128"},{"ruleId":"123","severity":1,"message":"129","line":9,"column":3,"nodeType":"125","messageId":"126","endLine":9,"endColumn":17},{"ruleId":"123","severity":1,"message":"130","line":53,"column":10,"nodeType":"125","messageId":"126","endLine":53,"endColumn":19},{"ruleId":"131","severity":1,"message":"132","line":106,"column":45,"nodeType":"133","messageId":"134","endLine":106,"endColumn":47},{"ruleId":"123","severity":1,"message":"135","line":5,"column":7,"nodeType":"125","messageId":"126","endLine":5,"endColumn":18},{"ruleId":"131","severity":1,"message":"136","line":32,"column":45,"nodeType":"133","messageId":"134","endLine":32,"endColumn":47},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateSteps'. Either include it or remove the dependency array.","ArrayExpression",["139"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar",["137"],["138"],"'LinearProgress' is defined but never used.","'uploading' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'currContent' is assigned a value but never used.","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},"Update the dependencies array to be: [generateSteps, report.id]",{"range":"142","text":"143"},[1312,1323],"[generateSteps, report.id]"]
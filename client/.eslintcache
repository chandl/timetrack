[{"/Users/chandler/Documents/Projects/timetrack/client/src/index.js":"1","/Users/chandler/Documents/Projects/timetrack/client/src/reportWebVitals.js":"2","/Users/chandler/Documents/Projects/timetrack/client/src/App.js":"3","/Users/chandler/Documents/Projects/timetrack/client/src/components/AppHeader.js":"4","/Users/chandler/Documents/Projects/timetrack/client/src/pages/Home.js":"5","/Users/chandler/Documents/Projects/timetrack/client/src/pages/TimeManager.js":"6","/Users/chandler/Documents/Projects/timetrack/client/src/components/ErrorSnackbar.js":"7","/Users/chandler/Documents/Projects/timetrack/client/src/components/TimeEditor.js":"8","/Users/chandler/Documents/Projects/timetrack/client/src/components/ManagerComponent.js":"9","/Users/chandler/Documents/Projects/timetrack/client/src/pages/ReportManager.js":"10"},{"size":515,"mtime":1609114857173,"results":"11","hashOfConfig":"12"},{"size":364,"mtime":1609114857322,"results":"13","hashOfConfig":"12"},{"size":913,"mtime":1609142904877,"results":"14","hashOfConfig":"12"},{"size":778,"mtime":1609114857082,"results":"15","hashOfConfig":"12"},{"size":173,"mtime":1609114857184,"results":"16","hashOfConfig":"12"},{"size":5966,"mtime":1609143303476,"results":"17","hashOfConfig":"12"},{"size":1343,"mtime":1609114857108,"results":"18","hashOfConfig":"12"},{"size":4409,"mtime":1609114857157,"results":"19","hashOfConfig":"12"},{"size":928,"mtime":1609143918096,"results":"20","hashOfConfig":"12"},{"size":4709,"mtime":1609144413039,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1pg95bi",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"/Users/chandler/Documents/Projects/timetrack/client/src/index.js",[],["46","47"],"/Users/chandler/Documents/Projects/timetrack/client/src/reportWebVitals.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/App.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/AppHeader.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/pages/Home.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/pages/TimeManager.js",["48","49"],"import React, { Component, Fragment } from \"react\";\nimport { withRouter, Route, Redirect, Link } from \"react-router-dom\";\nimport {\n  withStyles,\n  Typography,\n  Fab,\n  IconButton,\n  Paper,\n  Button,\n} from \"@material-ui/core\";\nimport { DataGrid } from \"@material-ui/data-grid\";\n\nimport {\n  Delete as DeleteIcon,\n  Add as AddIcon,\n  Edit as EditIcon,\n} from \"@material-ui/icons\";\nimport { find } from \"lodash\";\nimport { compose } from \"recompose\";\n\nimport TimeEditor from \"../components/TimeEditor\";\nimport ErrorSnackbar from \"../components/ErrorSnackbar\";\nimport {Fetch} from \"../components/ManagerComponent\";\n\nconst FORMAT_MINUTES = (n) =>\n  n >= 60\n    ? `0${(n / 60) ^ 0}`.slice(-2) + \"h \" + (\"0\" + (n % 60)).slice(-2) + \"m\"\n    : (\"0\" + (n % 60)).slice(-2) + \"m\";\n\nconst TIME_DEFAULTS = {\n  minutes: 0,\n  day: new Date().toISOString().split(\"T\")[0],\n  billable: true,\n};\n\nconst TIME_COL_SORT = [\n  {\n    field: \"day\",\n    sort: \"desc\",\n  },\n];\n\nconst styles = (theme) => ({\n  posts: {\n    marginTop: theme.spacing(2),\n  },\n  fab: {\n    position: \"absolute\",\n    bottom: theme.spacing(3),\n    right: theme.spacing(3),\n    [theme.breakpoints.down(\"xs\")]: {\n      bottom: theme.spacing(2),\n      right: theme.spacing(2),\n    },\n  },\n});\n\nclass TimeManager extends Component {\n  timeColumns = [\n    { field: \"day\", headerName: \"Date\", width: 110 },\n    { field: \"customer\", headerName: \"Customer\" },\n    { field: \"serviceItem\", headerName: \"SvcItem\" },\n    {\n      field: \"minutes\",\n      headerName: \"Time\",\n      valueFormatter: (params) => FORMAT_MINUTES(params.row.minutes),\n    },\n    { field: \"notes\", headerName: \"Notes\", width: 250, sortable: false },\n    {\n      field: \"billable\",\n      headerName: \"Billable\",\n      renderCell: (params) => {\n        if (params.row.billable) {\n          return (\n            <Button variant=\"contained\" size=\"small\" color=\"primary\">\n              Yes\n            </Button>\n          );\n        } else {\n          return (\n            <Button variant=\"contained\" size=\"small\" color=\"secondary\">\n              No\n            </Button>\n          );\n        }\n      },\n    },\n    {\n      field: \"edit\",\n      headerName: \"Actions\",\n      width: 100,\n      renderCell: (params) => (\n        <>\n          <IconButton\n            component={Link}\n            to={`/time/${params.row.id}`}\n            color=\"inherit\"\n          >\n            <EditIcon />\n          </IconButton>\n          <IconButton\n            onClick={() => this.deletePost(params.row)}\n            color=\"inherit\"\n          >\n            <DeleteIcon />\n          </IconButton>\n        </>\n      ),\n    },\n  ];\n  state = {\n    loading: true,\n    posts: [],\n    customers: [],\n    serviceItems: [],\n    error: null,\n  };\n\n  componentDidMount() {\n    this.getPosts();\n  }\n\n  async getPosts() {\n    const [time, err] = await Fetch(\"get\", \"/time\");\n    if(err) {\n      this.setState({error: err});\n      return;\n    }\n    const customers = [...new Set(time.map((t) => t.customer))];\n    const serviceItems = [...new Set(time.map((t) => t.serviceItem))];\n\n    this.setState({\n      loading: false,\n      posts: time,\n      customers: customers,\n      serviceItems: serviceItems,\n    });\n  }\n\n  savePost = async (post) => {\n    console.log(\"SAVING POST:::\", post);\n\n    let err, res;\n    if (post.id) {\n      const id = post.id;\n\n      // Remove unneeded info from post\n      delete post.id;\n      delete post.associatedReport;\n     [res, err] = await Fetch(\"put\", `/time/${id}`, post);\n    } else {\n     [res, err] = await Fetch(\"post\", \"/time\", post);\n    }\n\n    if(err) {\n      this.setState({error: err});\n    }\n\n    this.props.history.goBack();\n    this.getPosts();\n  };\n\n  async deletePost(post) {\n    if (window.confirm(`Are you sure you want to delete time \"${post.id}\"`)) {\n      const [res, err] = await Fetch(\"delete\", `/time/${post.id}`);\n\n      if(err) {\n        this.setState({error: err})\n        return;\n      }\n\n      this.getPosts();\n    }\n  }\n\n  renderPostEditor = ({\n    match: {\n      params: { id },\n    },\n  }) => {\n    if (this.state.loading) return null;\n    let post = find(this.state.posts, { id: Number(id) });\n\n    if (!post && id !== \"new\") return <Redirect to=\"/time\" />;\n\n    if (id === \"new\") post = Object.assign({}, TIME_DEFAULTS);\n    return (\n      <TimeEditor\n        post={post}\n        customers={this.state.customers}\n        serviceItems={this.state.serviceItems}\n        onSave={this.savePost}\n      />\n    );\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Fragment>\n        <Typography variant=\"h4\">Time Manager</Typography>\n        {this.state.posts.length > 0 ? (\n          <Paper elevation={1} className={classes.posts}>\n            <div style={{ display: \"flex\", height: \"100%\" }}>\n              <div style={{ flexGrow: 1 }}>\n                <DataGrid\n                  autoHeight\n                  rowsPerPageOptions={[10, 25, 50, 100]}\n                  pageSize={25}\n                  showToolbar\n                  density=\"compact\"\n                  sortModel={TIME_COL_SORT}\n                  rows={this.state.posts}\n                  columns={this.timeColumns}\n                  checkboxSelection\n                />\n              </div>\n            </div>\n          </Paper>\n        ) : (\n          !this.state.loading && (\n            <Typography variant=\"subtitle1\">No time to display</Typography>\n          )\n        )}\n        <Fab\n          color=\"secondary\"\n          aria-label=\"add\"\n          className={classes.fab}\n          component={Link}\n          to=\"/time/new\"\n        >\n          <AddIcon />\n        </Fab>\n        <Route exact path=\"/time/:id\" render={this.renderPostEditor} />\n        {this.state.error && (\n          <ErrorSnackbar\n            onClose={() => this.setState({ error: null })}\n            message={this.state.error.message}\n          />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default compose(withRouter, withStyles(styles))(TimeManager);\n","/Users/chandler/Documents/Projects/timetrack/client/src/components/ErrorSnackbar.js",[],["50","51"],"/Users/chandler/Documents/Projects/timetrack/client/src/components/TimeEditor.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/components/ManagerComponent.js",[],"/Users/chandler/Documents/Projects/timetrack/client/src/pages/ReportManager.js",["52","53"],"import React, { Component, Fragment } from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport { compose } from \"recompose\";\nimport {\n    IconButton,\n    Paper,\n    Typography,\n    withStyles\n} from \"@material-ui/core\"\nimport {\n    Delete as DeleteIcon,\n    GetApp as DownloadIcon,\n    Edit as EditIcon,\n  } from \"@material-ui/icons\";\nimport { DataGrid } from \"@material-ui/data-grid\";\n\nimport { Fetch } from \"../components/ManagerComponent\";\n\n\nconst styles = theme => ({\nposts: {\n    marginTop: theme.spacing(2),\n},\nfab: {\n    position: 'absolute',\n    bottom: theme.spacing(3),\n    right: theme.spacing(3),\n    [theme.breakpoints.down('xs')]: {\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n    },\n},\n});\n\nconst REPORT_COL_SORT = [\n    {\n      field: \"startDate\",\n      sort: \"desc\",\n    },\n  ];\n  \n\n\nclass ReportManager extends Component {\n    reportColumns = [\n        { field: \"id\", headerName: \"Report #\" , width: 100},\n        { field: \"startDate\", headerName: \"Start Date\", width: 150 },\n        { field: \"endDate\", headerName: \"End Date\", width: 150 },\n        { field: \"totalMinutes\", headerName: \"Total Time\" },\n        {\n            field: \"edit\",\n            headerName: \"Actions\",\n            width: 200,\n            renderCell: (params) => { \n                let downloadColor = params.row.generatedFile ? \"primary\" : \"secondary\";\n\n                return (\n              <>\n                <IconButton\n                  component={Link}\n                  to={`/report/${params.row.id}`}\n                  color=\"inherit\"\n                >\n                  <EditIcon />\n                </IconButton>\n                <IconButton\n                  onClick={() => this.deleteReport(params.row)}\n                  color=\"inherit\"\n                >\n                  <DeleteIcon />\n                </IconButton>\n\n                <IconButton \n                    component={Link}\n                    to={\"#\"}\n                    color={downloadColor}\n                    >\n                        <DownloadIcon />\n                    </IconButton>\n                </>\n              \n            )}\n        }\n    ];\n\n\n    state = {\n        loading: true,\n        reports: [], \n        error: null\n    }\n\n    componentDidMount() {\n        this.getReports();\n    }\n\n    async getReports() {\n        const [reports, err] = await Fetch(\"get\", \"/report\");\n        if(err) {\n            this.setState({error: err});\n            return;\n        }\n        this.setState({\n            loading: false,\n            reports: reports\n        });\n    }\n\n    saveReport = async (report) => {\n        let err, res;\n        if (report.id) {\n            [res, err] = await Fetch(\"put\", `/report/${report.id}`, report);\n        } else {\n            [res, err] = await Fetch(\"post\", \"/report\", report);\n        }\n\n        if(err) {\n            this.setState({error : err});\n        }\n\n        this.props.history.goBack();\n        this.getReports();\n    }\n\n    deleteReport = async (report) => {\n        if (window.confirm(`Are you sure you want to delete report \"${report.id}\"`)) {\n            const [res, err] = await Fetch(\"delete\", `/report/${report.id}`);\n        \n            if(err) {\n                this.setState({error: err})\n                return;\n            }\n        \n            this.getPosts();\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <Fragment>\n                <Typography variant=\"h4\">Report Manager</Typography>\n                {this.state.reports.length > 0 ? (\n                    <Paper elevation={1} className={classes.reports}>\n                        <div style={{ display: \"flex\", height: \"100% \"}}>\n                            <div style={{ flexGrow: 1}}>\n                               <DataGrid \n                                    autoHeight\n                                    rowsPerPageOptions={[10, 25, 50, 100]}\n                                    pageSize={25}\n                                    showToolbar\n                                    density=\"compact\"\n                                    sortModel={REPORT_COL_SORT}\n                                    rows={this.state.reports}\n                                    columns={this.reportColumns}\n                                    checkboxSelection/>\n                            </div>\n                        </div>\n                    </Paper>\n                ) : (!this.state.loading && (\n                    <Typography variant=\"subtitle1\">No reports to display</Typography>\n                    )\n                )}\n            </Fragment>\n        );\n    }\n}\n\nexport default compose(withRouter, withStyles(styles))(ReportManager);\n",{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":152,"column":7,"nodeType":"60","messageId":"61","endLine":152,"endColumn":10},{"ruleId":"58","severity":1,"message":"59","line":165,"column":14,"nodeType":"60","messageId":"61","endLine":165,"endColumn":17},{"ruleId":"54","replacedBy":"62"},{"ruleId":"56","replacedBy":"63"},{"ruleId":"58","severity":1,"message":"59","line":114,"column":14,"nodeType":"60","messageId":"61","endLine":114,"endColumn":17},{"ruleId":"58","severity":1,"message":"59","line":127,"column":20,"nodeType":"60","messageId":"61","endLine":127,"endColumn":23},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar",["64"],["65"],"no-global-assign","no-unsafe-negation"]